
@model GuanajuatoAdminUsuarios.Models.CapturaAccidentesModel
@{
    @inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor;
    var listaIdsPermitidosJson = @HttpContextAccessor.HttpContext.Session.GetString("IdsPermitidos").ToString();
    var autorizaciones = @HttpContextAccessor.HttpContext.Session.GetString("Autorizaciones").ToString();
}

<script>
    $(document).ready(function () {
        var access = @listaIdsPermitidosJson;
        if (access != undefined && access != '') {
            if (!access.toString().includes(localStorage.getItem("menuId"))) {
                Swal.fire({
                    icon: "error",
                    title: "¡EL usuario no tiene acceso a esta opción!"
                });
                setTimeout(() => {
                    window.location.href = "/Principal";
                }, 200);
            }
        } else {
            Swal.fire({
                icon: "error",
                title: "¡EL usuario no tiene acceso a esta opción!"
            });
            setTimeout(() => {
                window.location.href = "/Principal";
            }, 200);
        }
    });

    function validacionHora(event) {
        var key = event.keyCode || event.charCode;
        var horaIngresada = event.target.value;

        // Permitir números del 0 al 9 y teclas especiales como borrar y arrow keys
        if ((key < 48 || key > 57) && (key !== 8 && key !== 46) && (key < 37 || key > 40)) {
            event.preventDefault();


            return;
        }

        // Verificar si ya hay cinco dígitos ingresados o si se intenta borrar
        if (horaIngresada.length >= 5 && key !== 8 && key !== 46) {
            event.preventDefault();
            return;
        }

        // Verificar los límites de cada dígito
        if (horaIngresada.length === 0 && key > 50) {
            event.preventDefault();
            return;
        }

        if (horaIngresada.length === 1 && horaIngresada.charAt(0) === "2" && key > 51) {
            event.preventDefault();
            return;
        }

        if (horaIngresada.length === 2 && key > 53) {
            event.preventDefault();
            return;
        }

        if (horaIngresada.length === 2 && key !== 8 && key !== 46) {
            event.target.value += ":";
        }

        if (horaIngresada.length === 4 && key > 57) {
            event.preventDefault();
            validarFecha();
            return;
        }
        validarFecha();

    }
    function validarFecha() {
        // Obtener la fecha actual
        var fechaActual = new Date();
        var fechaParseo = new Date(parseInt(fechaActual.getFullYear()), parseInt(fechaActual.getMonth()), parseInt(fechaActual.getDate()));


        var fechaSeleccionadaString = $("#Fecha").val();
        var splitFechaSeleccion = fechaSeleccionadaString.split('/')
        var objetoFecha = new Date(parseInt(splitFechaSeleccion[2]), parseInt(splitFechaSeleccion[1]) - 1, parseInt(splitFechaSeleccion[0]));
        console.log("objetoFecha:", objetoFecha)
        console.log("fechaParseo:", fechaParseo)
        // Comparar la fecha seleccionada con la fecha actual
        if (fechaParseo.getTime() === objetoFecha.getTime()) {
            // Si la fecha seleccionada es la fecha actual, verificar la hora ingresada
            console.log("SI Entra")
            var horaIngresada = $("#HoraStr").val();
            var horaActual = fechaActual.getHours() * 60 + fechaActual.getMinutes();
            var horaIngresadaSplit = horaIngresada.split(':');
            var horaIngresadaEnMinutos = parseInt(horaIngresadaSplit[0]) * 60 + parseInt(horaIngresadaSplit[1]);
            console.log("horaIngresada", horaIngresada)
            console.log("horaActual", horaActual)
            console.log("horaSplit", horaIngresadaSplit)

            console.log("horaIngresadaEnMinutos", horaIngresadaEnMinutos)

            if (horaIngresadaEnMinutos > horaActual) {

                $("#HoraStr").val('');
                event.preventDefault();
            }
        }
    }

</script>
<div class="mainContainer bg-light">

    <section class="mx-md-3 mx-lg-4 mx-xl-5 bg-white boxShadow my-5 rounded">
        <div class="row align-items-center justify-content-between px-4 px-md-4 pt-3 pb-2">
            <div class="col-12 col-md-auto">
                <div class="row align-items-center justify-content-center justify-content-md-start">
                    <div class="col-auto">
                        <div class="border border-2 border-dark rounded-circle">
                            <h5 class="m-0 numberCard d-flex align-items-center justify-content-center">
                                <b>1</b>
                            </h5>
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="icon-accidentes h1 colorPrimary"></i>
                    </div>
                    <div class="col-auto my-3">
                        <h2 class="m-0 h3"><b>Accidente</b></h2>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-8 pe-0">
                <div class="bgSuccess py-1"></div>
            </div>
            <div class="col-4 ps-0">
                <div class="bg-light py-1"></div>
            </div>
        </div>
        <div class="col-12 col-md-auto mt-4 mb-2">
            <h5 class="px-4"><b>Captura de accidentes</b></h5>
            <h6 class="px-4 text-muted">Captura de accidente en <b class="colorPrimary">Registro de Infracciones y Accidentes de Guanajuato.</b></h6>
        </div>
        <form id="nuevoAccidente1Form" class="row px-4 align-items-end">
            <div class="col-12">
                <div class="row">
                    <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                        <div class="controlForm my-3">
                            <label>Fecha <b>(obligatorio)</b>:</label>
                            <span>
                                @(Html.Kendo().DatePickerFor(t => t.Fecha).Max(DateTime.Now)
                                    .Label(l => l.Content("Fecha <b>(obligatorio)</b>:"))
                                    .Culture("es-ES")
                                    .HtmlAttributes(new { style = "width: 100%", title = "please enter date" })
                                    .Events(e =>
                                    {
                                        e.Change("validarFecha");
                                    })
                                    )
                            </span>
                        </div>
                    </div>
                    <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                        <div class="form-group col-md-3 controlForm" style="height: 65%">
                            <label class="tex">Hora(Formato 24 horas):</label>
                            <input type="text" id="HoraStr" name="HoraStr" onkeydown="validacionHora(event)" step="60" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                <div class="controlForm mb-3">
                    <label>Municipio <b>(obligatorio):</b></label>
                    <span>
                        @(Html.Kendo().DropDownListFor(t => t.IdMunicipio)
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .OptionLabel("Selecciona un Municipio")
                            .Filter(FilterType.Contains)

                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("Municipios_Por_Delegacion_Drop", "CapturaAccidentes");
                                });
                            })
                            .HtmlAttributes(new { data_required_msg = "El campo Municipio es obligatorio" })
                            .HtmlAttributes(new { style = "width:100%;" })
                            .Filter(FilterType.Contains)
                            )
                    </span>
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                <div class="controlForm mb-3">
                    <label>Carretera <b>(obligatorio):</b></label>
                    <span>
                        @(Html.Kendo().DropDownListFor(t => t.IdCarretera)
                            .Label(l => l.Content("Carretera <b>(obligatorio)</b>:"))
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .Filter(FilterType.Contains)

                            .OptionLabel("Selecciona una Carretera")
                            .Events(e => e.Change("carreteraDropDownChange"))
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("CarreterasPorDelegacion", "CapturaAccidentes");
                                });
                            })
                            .HtmlAttributes(new { style = "width:100%;" })
                            .Filter(FilterType.Contains)
                            )
                    </span>
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                <div class="controlForm mb-3">
                    <label>Tramo <b>(obligatorio):</b></label>
                    <span>
                        @(Html.Kendo().DropDownListFor(t => t.IdTramo)
                            .Label(l => l.Content("Tramo <b>(obligatorio)</b>:"))
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .OptionLabel("Selecciona un Tramo")
                            .Filter(FilterType.Contains)

                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("Tramos_Drop", "CapturaAccidentes");
                                });
                            })
                            .HtmlAttributes(new { style = "width:100%;" })
                            .Filter(FilterType.Contains)
                            )
                    </span>
                </div>
            </div>

            <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                <div class="controlForm my-3">
                    @(Html.Kendo().TextBoxFor(t => t.Kilometro)
                        .Label(l => l.Content("Kilómetro <b>(obligatorio)</b>:"))
                        .Placeholder("Ingresa el kilómetro del accidente")
                        .HtmlAttributes(new { style = "width: 100%", type = "number" })
                        )
                </div>
            </div>
        </form>
        <div class="row px-4 align-items-end mb-3">
            <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                <div class="controlButton my-3" onclick="guardarAccidente()">
                    @(Html.Kendo().Button()
                    .Name("AltaAccidente")
                    .HtmlAttributes(new { @class = "btnPrimary" })
                    .Content("<h5 class=\"m-0\"><b>Guardar</b></h5>"))
                </div>

            </div>       
        </div>
    </section>
</div>

 <script>
    function carreteraDropDownChange() {
        var carreteraDDValue = $("#IdCarretera").data("kendoDropDownList").value();

        showLoading();
        $.ajax({
            url: "/CapturaAccidentes/Tramos_Drop",
            type: "POST",
            data: { carreteraDDValue: carreteraDDValue }, 
            success: function (data) {
                var TramosDropDown = $("#IdTramo").data("kendoDropDownList");
                TramosDropDown.dataSource.data(data);
                hideLoading();
            },
            error: function (xhr, status, error) {
                hideLoading();
            }
        });
    }

    function guardarAccidente() {

        var Mydata = $("#nuevoAccidente1Form").serialize();
        var controlsValidate = [];
        var isValid = true;

        controlsValidate.push({ 'controlName': 'Fecha' });
        controlsValidate.push({ 'controlName': 'HoraStr' });
        controlsValidate.push({ 'controlName': 'Kilometro' });

        // INPUTS
        if (!isControlsValid(controlsValidate)) { isValid = false; }

        // DROP DOWN LIST
        controlsValidate = [];
        controlsValidate.push({ 'controlName': 'IdMunicipio' });
        controlsValidate.push({ 'controlName': 'IdCarretera' });
        controlsValidate.push({ 'controlName': 'IdTramo' });
        
        if (!isControlsValidDropDown(controlsValidate)) { isValid = false; }

        if (!isValid) {
            sitteg_warning('Hacen falta datos o existen datos incorrectos, favor de verificar.');
            return;
        }
        showLoading();
        $.ajax({
            url: '/CapturaAccidentes/GuardarUbicacionAccidente',
            type: 'POST',
            data: Mydata,
            success: function (result) {
                if (result.success) {
                    sitteg_success("Se ha creado un registro de accidente, continue capturando la información solicitada");
                    //$('#VehiculosInvolucrados').show();
                    window.location.href = '/CapturaAccidentes/CapturaAaccidente/'
                } else {
                    // Muestra los mensajes de error en el frontend
                    var errorMessages = result.errors.join("\n");
                    sitteg_warning("Ocurrieron los siguientes errores:\n" + errorMessages);
                }
                hideLoading();
            }, error: function () {
                sitteg_warning("Ocurrio un error al procesar su solicitud.");
                hideLoading();
            }
           
        });
    }

    function cambiaFecha() {
        var timepickerControl = $("#timepicker").data("kendoTimePicker");
        var fechaSeleccionada = new Date(this.value());
        var horaSeleccionada = timepickerControl.value(); 

        var fechaActual = new Date();

        if (fechaSeleccionada.getDate() == fechaActual.getDate() &&
            fechaSeleccionada.getMonth() == fechaActual.getMonth() &&
            fechaSeleccionada.getFullYear() == fechaActual.getFullYear()) {

            var horaActual = fechaActual.getHours() * 60 + fechaActual.getMinutes();

            if (horaSeleccionada != null && horaSeleccionada.getHours() * 60 + horaSeleccionada.getMinutes() > horaActual) {
                console.log("La hora seleccionada es posterior a la hora actual. Limpiando selección.");
                timepickerControl.value("");
            }
        }

        // Establecer la hora máxima como la hora actual
        timepickerControl.max(fechaActual);
    }

   </script>